name: Joker CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.7.1
        with:
          sdk: stable

      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Install tools
        run: |
          dart pub global activate melos
          dart pub global activate coverage

      - name: Bootstrap project
        run: melos bootstrap

      - name: Analyze code
        run: melos run analyze

      - name: Run tests with coverage
        run: melos run test

      - name: Convert JSON to LCOV and combine
        run: |
          mkdir -p coverage
          touch coverage/lcov.info
          JSON_FILES=$(find packages -path '*/coverage/test/*_test.dart.vm.json')
          for FILE in $JSON_FILES
          do
            PACKAGE_NAME=$(echo $FILE | cut -d '/' -f 2)
            echo "Processing coverage for package: $PACKAGE_NAME from file: $FILE"
            dart pub global run coverage:format_coverage --lcov --in=$FILE --out=coverage/temp_lcov.info --packages=.dart_tool/package_config.json
            sed "s,^SF:lib,SF:packages/$PACKAGE_NAME/lib," "coverage/temp_lcov.info" >> coverage/lcov.info
            rm coverage/temp_lcov.info
          done

      - name: Filter coverage report
        run: |
          lcov --remove coverage/lcov.info '*/.pub-cache/*' '*/test/*' -o coverage/lcov_filtered.info

      - name: Check coverage with Very Good Coverage
        uses: VeryGoodOpenSource/very_good_coverage@v3.0.0
        with:
          path: coverage/lcov_filtered.info
          min_coverage: 90

      - name: Generate Simplified LCOV summary
        id: lcov_summary
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)

          SUMMARY_BODY="### ðŸ“Š Code Coverage for commit \`$COMMIT_SHA\`\n\n"
          SUMMARY_BODY+="| Package | Lines Coverage |\n"
          SUMMARY_BODY+="| :--- | :--- |\n"

          PACKAGES=$(find packages -name "pubspec.yaml" -exec dirname {} \;)

          for PKG_PATH in $PACKAGES
          do
            PKG_NAME=$(basename $PKG_PATH)
            
            lcov --extract "coverage/lcov_filtered.info" "*/$PKG_NAME/*" --output "coverage/${PKG_NAME}_coverage.info"
            
            if [ -s "coverage/${PKG_NAME}_coverage.info" ]; then
              PKG_SUMMARY=$(lcov --summary "coverage/${PKG_NAME}_coverage.info")
              LINES=$(echo "$PKG_SUMMARY" | grep "lines......:" | awk '{print $2, $3, $4, $5, $6}')
              SUMMARY_BODY+="| **$PKG_NAME** | \`$LINES\` |\n"
            else
              SUMMARY_BODY+="| **$PKG_NAME** | `No tests found` |\n"
            fi
          done

          OVERALL_LINES_COVERAGE=$(lcov --summary coverage/lcov_filtered.info | grep "lines......:" | awk '{print $2, $3, $4, $5, $6}')
          SUMMARY_BODY+="\n---\n"
          SUMMARY_BODY+="**Total Coverage:** \`$OVERALL_LINES_COVERAGE\`"

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post new coverage comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = ${{ toJSON(steps.lcov_summary.outputs.summary) }};

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Clean project
        run: melos clean
